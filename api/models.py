from django.db import models
from django.db import models
from django.utils import timezone
import random

# ุฏุงูุฉ ูุญูุธ ุงูููุฏูููุงุช ูุงูุตูุฑ ุฏุงุฎู ูุฌูุฏ ุจุงุณู ุงููุดุงุท
def activity_video_path(instance, filename):
    return f"activities/{instance.activity.title}/videos/{filename}"

def activity_image_path(instance, filename):
    return f"activities/{instance.activity.title}/images/{filename}"


class Activity(models.Model):
    COLOR_CHOICES = [
        ("from-yellow-400 to-orange-500", "ุฃุตูุฑ โ ุจุฑุชูุงูู"),
        ("from-cyan-400 to-blue-500", "ุณูุงูู โ ุฃุฒุฑู"),
        ("from-indigo-400 to-purple-500", "ูููู โ ุจููุณุฌู"),
        ("from-purple-400 to-pink-500", "ุจููุณุฌู โ ูุฑุฏู"),
        ("from-green-400 to-blue-500", "ุฃุฎุถุฑ โ ุฃุฒุฑู"),
        ("from-orange-400 to-red-500", "ุจุฑุชูุงูู โ ุฃุญูุฑ"),
    ]
    STATUS_CHOICES = [
        ("ูุนูู", "ูุนูู"),
        ("ูุงุฏู", "ูุงุฏู"),
        ("ููุชูู", "ููุชูู"),
    ]

    id = models.AutoField(primary_key=True, verbose_name="ุงููุนุฑู")
    title = models.CharField(max_length=255, verbose_name="ุงูุนููุงู")
    date = models.DateField(default=timezone.now,verbose_name="ุงูุชุงุฑูุฎ") # ููููู ุชุบููุฑู DateField
    location = models.CharField(default='Aรฏn El Kebira', max_length=255, verbose_name="ุงูููุงู")
    participants = models.PositiveIntegerField(verbose_name="ุนุฏุฏ ุงููุดุงุฑููู",null=True, blank=True)
    duration = models.CharField(max_length=50,null=True, blank=True, verbose_name="ุงููุฏุฉ")
    category = models.CharField(max_length=100, verbose_name="ุงููุฆุฉ",null=True, blank=True)
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="ุงูุญุงูุฉ")
    description = models.TextField(verbose_name="ุงููุตู")
    # color = models.CharField(max_length=50, choices=COLOR_CHOICES, verbose_name="ุงูููู",null=True, blank=True)
    # def save(self, *args, **kwargs):
    #     # ุชุนููู ููู ุชููุงุฆู ุฅุฐุง ูู ูุชู ุชุญุฏูุฏู
    #     if not self.color:
    #         self.color = random.choice([c[0] for c in self.COLOR_CHOICES])


    #     super().save(*args, **kwargs)
    class Meta:
        verbose_name = "ูุดุงุท"
        verbose_name_plural = "ุงูุฃูุดุทุฉ"

    def __str__(self):
        return self.title


class ActivityHighlights(models.Model):
    name = models.CharField(max_length=100, verbose_name="ุงูููุทุฉ ุงููููุฒุฉ")
    activity = models.ForeignKey(Activity, on_delete=models.CASCADE, related_name="highlights", verbose_name="ุงููุดุงุท")

    class Meta:
        verbose_name = "ููุฒุฉ ุงููุดุงุท"
        verbose_name_plural = "ูููุฒุงุช ุงููุดุงุท"

    def __str__(self):
        return self.name


class ActivityAchievements(models.Model):
    name = models.CharField(max_length=100, verbose_name="ุงูุฅูุฌุงุฒ")
    activity = models.ForeignKey(Activity, on_delete=models.CASCADE, related_name="achievements", verbose_name="ุงููุดุงุท")

    class Meta:
        verbose_name = "ุฅูุฌุงุฒ ุงููุดุงุท"
        verbose_name_plural = "ุฅูุฌุงุฒุงุช ุงููุดุงุท"

    def __str__(self):
        return self.name


class ActivityVideo(models.Model):
    activity = models.ForeignKey(Activity, on_delete=models.CASCADE, related_name="videos", verbose_name="ุงููุดุงุท")
    video = models.FileField(upload_to=activity_video_path, verbose_name="ุงูููุฏูู")

    class Meta:
        verbose_name = "ููุฏูู ุงููุดุงุท"
        verbose_name_plural = "ููุฏูููุงุช ุงููุดุงุท"

    def __str__(self):
        return f"๐ฅ {self.activity.title}"


class ActivityImage(models.Model):
    activity = models.ForeignKey(Activity, on_delete=models.CASCADE, related_name="images", verbose_name="ุงููุดุงุท")
    image = models.ImageField(upload_to=activity_image_path, verbose_name="ุงูุตูุฑุฉ")

    class Meta:
        verbose_name = "ุตูุฑุฉ ุงููุดุงุท"
        verbose_name_plural = "ุตูุฑ ุงููุดุงุท"

    def __str__(self):
        return f"๐ผ๏ธ {self.activity.title}"
    
# * ---------------------------------------------------------->
def news_image_path(instance, filename):
    return f"news/{instance.title}/images/{filename}"

class News(models.Model):
    # ุฃููุงุน ุงูุฃุฎุจุงุฑ (Type)
    TYPE_CHOICES = [
        ("announcement", "ุฅุนูุงู"),       # ุฎุจุฑ ุฃู ุฅุนูุงู ุฑุณูู
        ("achievement", "ุฅูุฌุงุฒ"),        # ุฎุจุฑ ูุฎุต ุฅูุฌุงุฒ ุฃู ูุฌุงุญ
        ("reminder", "ุชุฐููุฑ"),          # ุชุฐููุฑ ุจุญุฏุซ ุฃู ููุนุฏ
        ("workshop", "ูุฑุดุฉ ุนูู"),       # ุฎุจุฑ ูุฎุต ูุฑุดุฉ ุฃู ุชุฏุฑูุจ
        ("initiative", "ูุจุงุฏุฑุฉ"),        # ุฎุจุฑ ุนู ูุจุงุฏุฑุฉ ุฌุฏูุฏุฉ
    ]

    # ุงูุฃููููุงุช (Icons)
    # ICON_CHOICES = [
    #     ("Megaphone", "๐ข ููุจุฑ ุตูุช (ุฅุนูุงู)"),
    #     ("Users", "๐ฅ ุฃุดุฎุงุต (ูุณุชุฎุฏููู / ูุฌุชูุน)"),
    #     ("Star", "โญ ูุฌูุฉ (ุชููุฒ / ุฅูุฌุงุฒ)"),
    #     ("Bell", "๐ ุฌุฑุณ (ุชูุจูู / ุชุฐููุฑ)"),
    #     ("Trophy", "๐ ูุฃุณ (ุฌุงุฆุฒุฉ / ูุฌุงุญ)"),
    # ]

    # # ุงูุฃููุงู (Colors)
    # COLOR_CHOICES = [
    #     ("text-primary", "ุฃุฒุฑู ุฃุณุงุณู"),       # ุงูููู ุงูุฑุฆูุณู (Primary)
    #     ("text-secondary", "ุฑูุงุฏู ุซุงููู"),    # ุงูููู ุงูุซุงููู
    #     ("text-accent", "ุฃุฎุถุฑ ุจุงุฑุฒ"),         # ููู ูููุฒ (Accent)
    #     ("text-chart-3", "ุจุฑุชูุงูู ุฅุญุตุงุฆู"),   # ููู ุจุฑุชูุงูู/ุฅุญุตุงุฆู
    #     ("text-chart-4", "ุจููุณุฌู ุฅุญุตุงุฆู"),    # ููู ุจููุณุฌู/ุฅุญุตุงุฆู
    # ]

    # # ุฎูููุงุช (Background Colors)
    # BG_CHOICES = [
    #     ("bg-primary/10", "ุฎูููุฉ ุฒุฑูุงุก ูุงุชุญุฉ"),
    #     ("bg-secondary/10", "ุฎูููุฉ ุฑูุงุฏูุฉ ูุงุชุญุฉ"),
    #     ("bg-accent/10", "ุฎูููุฉ ุฎุถุฑุงุก ูุงุชุญุฉ"),
    #     ("bg-chart-3/10", "ุฎูููุฉ ุจุฑุชูุงููุฉ ูุงุชุญุฉ"),
    #     ("bg-chart-4/10", "ุฎูููุฉ ุจููุณุฌูุฉ ูุงุชุญุฉ"),
    # ]

    id = models.AutoField(primary_key=True)  
    title = models.CharField(max_length=255, verbose_name="ุงูุนููุงู")
    excerpt = models.TextField(verbose_name="ููุฎุต ูุตูุฑ")
    content = models.TextField(verbose_name="ุงููุญุชูู")
    date = models.DateField(verbose_name="ุงูุชุงุฑูุฎ")
    time = models.TimeField(verbose_name="ุงูููุช")
    author = models.ForeignKey(
        "Members",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        limit_choices_to={"type": "admin"},  # ูุฌูุจ ููุท ุงูุฃุนุถุงุก ุงูุฅุฏุงุฑููู
        verbose_name="ุงููุงุชุจ"
    )
    # category = models.CharField(max_length=100, verbose_name="ุงูุชุตููู")
    
    type = models.CharField(max_length=100, choices=TYPE_CHOICES, verbose_name="ููุน ุงูุฎุจุฑ")
    # icon = models.CharField(max_length=100, choices=ICON_CHOICES, blank=True, null=True, verbose_name="ุงูุฃููููุฉ")
    # color = models.CharField(max_length=50, choices=COLOR_CHOICES, blank=True, null=True, verbose_name="ุงูููู")
    # bgColor = models.CharField(max_length=50, choices=BG_CHOICES, blank=True, null=True, verbose_name="ููู ุงูุฎูููุฉ")
    
    image = models.ImageField(upload_to=news_image_path, verbose_name="ุงูุตูุฑุฉ")  
    views = models.PositiveIntegerField(default=0, verbose_name="ุนุฏุฏ ุงููุดุงูุฏุงุช")
    likes = models.PositiveIntegerField(default=0, verbose_name="ุนุฏุฏ ุงูุฅุนุฌุงุจุงุช")
    featured = models.BooleanField(default=False, verbose_name="ูููุฒ")
    # def save(self, *args, **kwargs):
    #     # ุชุนููู ููู ุชููุงุฆู ุฅุฐุง ูู ูุชู ุชุญุฏูุฏู
    #     if not self.color:
    #         self.color = random.choice([c[0] for c in self.COLOR_CHOICES])

    #     # ุชุนููู ุฃููููุฉ ุชููุงุฆูุฉ ุฅุฐุง ูู ูุชู ุชุญุฏูุฏูุง
    #     if not self.icon:
    #         self.icon = random.choice([i[0] for i in self.ICON_CHOICES])

    #     # ุชุนููู ุฃููููุฉ ุชููุงุฆูุฉ ุฅุฐุง ูู ูุชู ุชุญุฏูุฏูุง
    #     if not self.bgColor:
    #         self.bgColor = random.choice([i[0] for i in self.BG_CHOICES])

    #     super().save(*args, **kwargs)
    def __str__(self):
        return self.title
    class Meta:
        verbose_name = "ุงูุฎุจุฑ"
        verbose_name_plural = "ุงูุงุฎุจุงุฑ"

# * --------------------------------------------------------



class Members(models.Model):
    # ุงูุฃุฏูุงุฑ (Role Choices)
    ROLE_CHOICES = [
        ("president", "ุฑุฆูุณ"),
        ("vice1", "ูุงุฆุจ ุฃูู"),
        ("vice2", "ูุงุฆุจ ุซุงูู"),
        ("general_secretary", "ุงููุงุชุจ ุงูุนุงู"),
        ("vice_secretary", "ูุงุฆุจ ุงููุงุชุจ ุงูุนุงู"),
        ("treasurer", "ุฃููู ุงููุงู"),
        ("vice_treasurer", "ูุงุฆุจ ุฃููู ุงููุงู"),
        ("member1", "ุนุถู ุฃูู"),
        ("member2", "ุนุถู ุซุงูู"),
        ("social_committee", "ุฑุฆูุณ ูุฌูุฉ ุงูุดุคูู ุงูุงุฌุชูุงุนูุฉ"),
        ("culture_committee", "ุฑุฆูุณ ูุฌูุฉ ุงููุดุงุทุงุช ุงูุซูุงููุฉ"),
        ("sports_committee", "ุฑุฆูุณ ูุฌูุฉ ุงููุดุงุทุงุช ุงูุฑูุงุถูุฉ"),
    ]

    # ููุน ุงูุนุถู
    TYPE_CHOICES = [
        ("admin", "ุนุถู ุฅุฏุงุฑู"),
        ("normal", "ุนุถู ุนุงุฏู"),
    ]

    # ุงูุฃููุงู
    COLOR_CHOICES = [
        ("bg-primary", "ุฃุฒุฑู ุฑุฆูุณู"),
        ("bg-secondary", "ุฑูุงุฏู ุซุงููู"),
        ("bg-accent", "ุฃุฎุถุฑ ุจุงุฑุฒ"),
        ("bg-chart-3", "ุจุฑุชูุงูู"),
        ("bg-chart-4", "ุจููุณุฌู"),
        ("bg-chart-5", "ุฃุญูุฑ"),
    ]

    # ุงูุฃููููุงุช
    ICON_CHOICES = [
        ("Crown", "๐ ุชุงุฌ (ุฑุฆูุณ / ููุงุฏู)"),
        ("Star", "โญ ูุฌู (ุชููุฒ)"),
        ("Award", "๐ ุฌุงุฆุฒุฉ (ุฅูุฌุงุฒ)"),
        ("Users", "๐ฅ ุฃุนุถุงุก / ูุฑูู"),
    ]

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255, verbose_name="ุงูุงุณู ุงููุงูู")
    role = models.CharField(max_length=100, choices=ROLE_CHOICES, verbose_name="ุงูุฏูุฑ")
    # department = models.CharField(max_length=100, blank=True, null=True, verbose_name="ุงููุณู")
    image = models.ImageField(upload_to="members_images/", blank=True, null=True, verbose_name="ุงูุตูุฑุฉ")
    bio = models.TextField(blank=True, null=True, verbose_name="ูุจุฐุฉ ูุตูุฑุฉ")
    joinDate = models.DateField(default=timezone.now, blank=True, null=True, verbose_name="ุชุงุฑูุฎ ุงูุงูุถูุงู")

    email = models.EmailField(max_length=255, blank=True, null=True, verbose_name="ุงูุจุฑูุฏ ุงูุฅููุชุฑููู")
    phone = models.CharField(max_length=50, blank=True, null=True, verbose_name="ุงููุงุชู")
    # location = models.CharField(max_length=255, blank=True, null=True, verbose_name="ุงูุนููุงู")
    education = models.CharField(max_length=255, blank=True, null=True, verbose_name="ุงููุณุชูู ุงูุชุนูููู")

    type = models.CharField(max_length=100, choices=TYPE_CHOICES, default="normal", verbose_name="ููุน ุงูุนุถู")
    color = models.CharField(max_length=50, choices=COLOR_CHOICES, blank=True, null=True, verbose_name="ุงูููู")
    icon = models.CharField(max_length=100, choices=ICON_CHOICES, blank=True, null=True, verbose_name="ุงูุฃููููุฉ")

    def save(self, *args, **kwargs):
        # ุชุนููู ููู ุชููุงุฆู ุฅุฐุง ูู ูุชู ุชุญุฏูุฏู
        if not self.color:
            self.color = random.choice([c[0] for c in self.COLOR_CHOICES])

        # ุชุนููู ุฃููููุฉ ุชููุงุฆูุฉ ุฅุฐุง ูู ูุชู ุชุญุฏูุฏูุง
        if not self.icon:
            self.icon = random.choice([i[0] for i in self.ICON_CHOICES])

        super().save(*args, **kwargs)

    def __str__(self):
        return self.name
    class Meta:
        verbose_name = "ุนุถู"
        verbose_name_plural = "ุงูุงุนุถุงุก"



# ุฌุฏูู ุงูุฅูุฌุงุฒุงุช (ูุฑุชุจุท ุจุนุถู)
class MemberAchievement(models.Model):
    member = models.ForeignKey(Members, on_delete=models.CASCADE, related_name="achievements")
    title = models.CharField(max_length=255, verbose_name="ุงูุฅูุฌุงุฒ")

    def __str__(self):
        return f"{self.title} - {self.member.name}"


# ุฌุฏูู ุงูููุงุฑุงุช (ูุฑุชุจุท ุจุนุถู)
class MemberSkill(models.Model):
    member = models.ForeignKey(Members, on_delete=models.CASCADE, related_name="skills")
    name = models.CharField(max_length=255, verbose_name="ุงูููุงุฑุฉ")

    def __str__(self):
        return f"{self.name} - {self.member.name}"

def Application_photo_path(instance, filename):
    return f"applications_photos/{instance.applicationId}/photo{filename}"
def Application_id_card_path(instance, filename):
    return f"applications_photos/{instance.applicationId}/id_card{filename}"

class Application(models.Model):
    applicationId = models.AutoField(primary_key=True, verbose_name="ุงููุนุฑู")
    photo = models.ImageField(
        upload_to=Application_photo_path, 
        verbose_name="ุงูุตูุฑุฉ ุงูุดุฎุตูุฉ"
    )
    id_card = models.ImageField(
        blank=True, # remove
        null=True,  # remove
        upload_to=Application_id_card_path, 
        verbose_name="ุตูุฑุฉ ุจุทุงูุฉ ุงููููุฉ"
    )
    fullName = models.CharField(
        max_length=255, 
        verbose_name="ุงูุงุณู ุงููุงูู",
        unique=True

    )
    email = models.EmailField(
        max_length=255, 
        verbose_name="ุงูุจุฑูุฏ ุงูุฅููุชุฑููู"
    )
    phone = models.CharField(
        max_length=50, 
        verbose_name="ุฑูู ุงููุงุชู"
    )
    age = models.PositiveIntegerField(
        verbose_name="ุงูุนูุฑ"
    )
    interests = models.TextField(
        verbose_name="ุงูุงูุชูุงูุงุช"
    )
    experience = models.TextField(
        blank=True, null=True, 
        verbose_name="ุงูุฎุจุฑุงุช ุงูุณุงุจูุฉ"
    )
    motivation = models.TextField(
        verbose_name="ุงูุฏุงูุน ููุงูุถูุงู"
    )
    submitted_at = models.DateTimeField(
        auto_now_add=True, 
        verbose_name="ุชุงุฑูุฎ ุงูุชูุฏูู"
    )

    class Meta:
        verbose_name = "ุทูุจ ุงูุงูุถูุงู"
        verbose_name_plural = "ุทูุจุงุช ุงูุงูุถูุงู"

    def __str__(self):
        return f"{self.fullName} - {self.applicationId}"


class Contact(models.Model):

    REASON_CHOICES = [
        ("membership", "ุงุณุชูุณุงุฑ ุนู ุงูุนุถููุฉ"),
        ("activities", "ุงูุฃูุดุทุฉ ูุงููุนุงููุงุช"),
        ("partnership", "ุดุฑุงูุฉ ุฃู ุชุนุงูู"),
        ("complaint", "ุดููู ุฃู ุงูุชุฑุงุญ"),
        ("other", "ุฃุฎุฑู"),
    ]



    name = models.CharField(max_length=100, verbose_name="ุงูุงุณู")
    email = models.EmailField(max_length=100, verbose_name="ุงูุจุฑูุฏ ุงูุฅููุชุฑููู",null=True,blank=True)
    contactReason = models.CharField(max_length=20, choices=REASON_CHOICES)  # ๐ ููุง ุงูุณุจุจ
    phone = models.CharField(max_length=10, verbose_name="ุฑูู ุงููุงุชู")
    subject = models.CharField(max_length=200, verbose_name="ุงูููุถูุน")
    message = models.TextField(verbose_name="ุงูุฑุณุงูุฉ")
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.name} - {self.reason}"
